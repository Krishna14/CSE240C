!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADDR_TRANSLATION_H	addr_translation.h	12;"	d
ASSOCIATIVITY	gen_cache_asm_files.py	/^        ASSOCIATIVITY   = extract_macro(f"{cache_level}_ASSOCIATIVITY", lines)$/;"	v
AUTO_GEN_FILES	Makefile	/^AUTO_GEN_FILES := l1_asm.h l2_asm.h$/;"	m
BANNER	io.h	42;"	d
BANNER_LEN	io.h	41;"	d
CACHELINE_SIZE	device_conf.h	37;"	d
CACHE_GROUP_SIZE	device_conf.h	38;"	d
CACHE_LEVELS	gen_cache_asm_files.py	/^CACHE_LEVELS    = ["L1", "L2"]$/;"	v
CACHE_TYPES_FNAME	gen_cache_asm_files.py	/^CACHE_TYPES_FNAME   = "cache_types.h"$/;"	v
CC	Makefile	/^CC          := gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS      := -std=gnu99 -O1 -Winline$/;"	m
CL_NEXT_OFFSET	cache_types.h	60;"	d
CL_NEXT_OFFSET	gen_cache_asm_files.py	/^    CL_NEXT_OFFSET  = extract_macro("CL_NEXT_OFFSET", lines)$/;"	v
CL_PREV_OFFSET	cache_types.h	61;"	d
CL_PREV_OFFSET	gen_cache_asm_files.py	/^    CL_PREV_OFFSET  = extract_macro("CL_PREV_OFFSET", lines)$/;"	v
COLLISION_REP	cache.h	37;"	d
CONF_FNAME	gen_cache_asm_files.py	/^CONF_FNAME          = "device_conf.h"$/;"	v
CPUID_AFFECTED_REGS	asm.h	32;"	d
CURR_PATH	Makefile	/^CURR_PATH	:= $(realpath $(dir $(realpath $(firstword $(MAKEFILE_LIST)))))$/;"	m
DEFAULT_FLAGS	cache_types.h	51;"	d
GET_BIT	cache_types.h	43;"	d
HEADERS	Makefile	/^HEADERS 	:= $(LIBHEADERS) $(LIBSRCS:.c=.h)$/;"	m
HEADER_ASM_H	asm.h	28;"	d
HEADER_CACHESC_H	cachesc.h	28;"	d
HEADER_CACHE_CONF_H	cache_types.h	30;"	d
HEADER_CACHE_H	cache.h	31;"	d
HEADER_DEVICE_CONF_H	device_conf.h	30;"	d
HEADER_IO_H	io.h	29;"	d
HEADER_L1_ASM_H	l1_asm.h	7;"	d
HEADER_L2_ASM_H	l2_asm.h	7;"	d
HEADER_UTIL_H	util.h	30;"	d
HEADER_VICTIM_H	victim.h	29;"	d
INCL_DIR	Makefile	/^INCL_DIR	:= $(INST_PATH)\/include$/;"	m
INDENT	io.h	43;"	d
INST_PATH	Makefile	/^    INST_PATH = $(realpath $(dir $(CURR_PATH)))$/;"	m
IS_CACHE_GROUP_INIT	cache_types.h	57;"	d
IS_FIRST	cache_types.h	55;"	d
IS_LAST	cache_types.h	56;"	d
L1	cache_types.h	/^enum cache_level {L1, L2};$/;"	e	enum:cache_level
L1_ACCESS_TIME	device_conf.h	46;"	d
L1_ADDRESSING	device_conf.h	43;"	d
L1_ASSOCIATIVITY	device_conf.h	45;"	d
L1_SETS	device_conf.h	44;"	d
L2	cache_types.h	/^enum cache_level {L1, L2};$/;"	e	enum:cache_level
L2_ACCESS_TIME	device_conf.h	51;"	d
L2_ADDRESSING	device_conf.h	48;"	d
L2_ASSOCIATIVITY	device_conf.h	50;"	d
L2_SETS	device_conf.h	49;"	d
L3_ACCESS_TIME	device_conf.h	56;"	d
L3_ADDRESSING	device_conf.h	53;"	d
L3_ASSOCIATIVITY	device_conf.h	55;"	d
L3_SETS	device_conf.h	54;"	d
LIB	Makefile	/^LIB         := libcachesc.a$/;"	m
LIBHEADERS	Makefile	/^LIBHEADERS  := cachesc.h io.h asm.h cache_types.h device_conf.h \\$/;"	m
LIBOBJS	Makefile	/^LIBOBJS     := $(LIBSRCS:.c=.o)$/;"	m
LIBSRCS	Makefile	/^LIBSRCS     := cache.c util.c victim.c addr_translation.c$/;"	m
LIB_DIR	Makefile	/^LIB_DIR		:= $(INST_PATH)\/lib$/;"	m
PAGE_MASK	cache_types.h	41;"	d
PAGE_SIZE	device_conf.h	33;"	d
PHYSICAL	cache_types.h	/^enum addressing_type {VIRTUAL, PHYSICAL};$/;"	e	enum:addressing_type
PLRU_REPS	cache_types.h	37;"	d
PRINT_FLUSH	io.h	35;"	d
PRINT_LINE	io.h	39;"	d
PROCESSOR_FREQ	device_conf.h	34;"	d
PagemapEntry	addr_translation.h	/^} PagemapEntry;$/;"	t	typeref:struct:__anon1
RDTSCP_AFFECTED_REGS	asm.h	34;"	d
RDTSC_AFFECTED_REGS	asm.h	33;"	d
REMOVE_PAGE_OFFSET	cache_types.h	42;"	d
SETS	gen_cache_asm_files.py	/^        SETS            = extract_macro(f"{cache_level}_SETS", lines)$/;"	v
SET_BIT	cache_types.h	44;"	d
SET_CACHE_GROUP_INIT	cache_types.h	54;"	d
SET_FIRST	cache_types.h	52;"	d
SET_LAST	cache_types.h	53;"	d
SET_MASK	cache_types.h	39;"	d
START_TIMER_FN	gen_cache_asm_files.py	/^START_TIMER_FN      = "start_timer"$/;"	v
STOP_TIMER_FN	gen_cache_asm_files.py	/^STOP_TIMER_FN       = "stop_timer"$/;"	v
TRANSFER_REG	asm.h	35;"	d
VIRTUAL	cache_types.h	/^enum addressing_type {VIRTUAL, PHYSICAL};$/;"	e	enum:addressing_type
_GNU_SOURCE	cache.h	34;"	d
_GNU_SOURCE	util.h	33;"	d
_GNU_SOURCE	victim.h	32;"	d
_XOPEN_SOURCE	addr_translation.h	15;"	d
access_diff	cache.h	/^static inline uint32_t access_diff(void *p) {$/;"	f
access_time	cache_types.h	/^    uint32_t access_time;$/;"	m	struct:cache_ctx
accesstime	asm.h	/^static inline uint32_t accesstime(void *p) {$/;"	f
accesstime_overhead	asm.h	/^static inline uint32_t accesstime_overhead() {$/;"	f
addressing	cache_types.h	/^    addressing_type addressing;$/;"	m	struct:cache_ctx
addressing_type	cache_types.h	/^enum addressing_type {VIRTUAL, PHYSICAL};$/;"	g
addressing_type	cache_types.h	/^typedef enum addressing_type addressing_type;$/;"	t	typeref:enum:addressing_type
allocate_cache_ds	cache.c	/^cacheline **allocate_cache_ds(cache_ctx *ctx) {$/;"	f
allocate_cache_ds_phys	cache.c	/^void allocate_cache_ds_phys(cache_ctx *ctx, cacheline **cl_ptr_arr) {$/;"	f
allocate_cache_ds_phys_priv	cache.c	/^void allocate_cache_ds_phys_priv(cache_ctx *ctx, cacheline **cl_ptr_arr,$/;"	f
allocate_cache_ds_phys_unpriv	cache.c	/^void allocate_cache_ds_phys_unpriv(cache_ctx *ctx, cacheline **cl_ptr_arr,$/;"	f
asm_l1_probe_cacheset	l1_asm.h	/^static inline cacheline *asm_l1_probe_cacheset(cacheline *curr_cl) {$/;"	f
asm_l2_probe_cacheset	l2_asm.h	/^static inline cacheline *asm_l2_probe_cacheset(cacheline *curr_cl) {$/;"	f
associativity	cache_types.h	/^    uint32_t associativity;$/;"	m	struct:cache_ctx
build_cache_ds	cache.c	/^cacheline *build_cache_ds(cache_ctx *ctx, cacheline **cl_ptr_arr) {$/;"	f
build_randomized_list_for_cache_set	cache.c	/^void build_randomized_list_for_cache_set(cache_ctx *ctx, cacheline **cacheline_ptr_arr)$/;"	f
cache_ctx	cache_types.h	/^struct cache_ctx {$/;"	s
cache_ctx	cache_types.h	/^typedef struct cache_ctx cache_ctx;$/;"	t	typeref:struct:cache_ctx
cache_ds_sanity_check	cache.c	/^int cache_ds_sanity_check(cache_ctx *ctx, cacheline *head) {$/;"	f
cache_level	cache_types.h	/^    cache_level cache_level;$/;"	m	struct:cache_ctx
cache_level	cache_types.h	/^enum cache_level {L1, L2};$/;"	g
cache_level	cache_types.h	/^typedef enum cache_level cache_level;$/;"	t	typeref:enum:cache_level
cache_level_lowercase	gen_cache_asm_files.py	/^    cache_level_lowercase = cache_level.lower()$/;"	v
cache_set	cache_types.h	/^    uint16_t cache_set;$/;"	m	struct:cacheline
cache_size	cache_types.h	/^    uint32_t cache_size;$/;"	m	struct:cache_ctx
cacheline	cache_types.h	/^struct cacheline {$/;"	s
cacheline	cache_types.h	/^typedef struct cacheline cacheline;$/;"	t	typeref:struct:cacheline
can_trans_phys_addrs	cache_types.h	/^static bool can_trans_phys_addrs(cache_ctx *ctx) {$/;"	f
cl_insert	cache_types.h	/^static void cl_insert(cacheline *last_cl, cacheline *new_cl) {$/;"	f
cl_remove	cache_types.h	/^static void cl_remove(cacheline *cl) {$/;"	f
cl_replace	cache_types.h	/^static void cl_replace(cacheline *new_cl, cacheline *old_cl) {$/;"	f
clear_cache	cache.h	/^static inline void clear_cache(cache_ctx *ctx) {$/;"	f
clflush	asm.h	/^static inline void clflush(void *p) {$/;"	f
cpuid	asm.h	/^static inline void cpuid() {$/;"	f
dedent	gen_cache_asm_files.py	/^from textwrap import dedent$/;"	i
extract_macro	gen_cache_asm_files.py	/^def extract_macro(macro_name, lines, type_conv=int):$/;"	f
file_page	addr_translation.h	/^    unsigned int file_page : 1;$/;"	m	struct:__anon1
find_collisions	cache.c	/^uint32_t find_collisions(cache_ctx *ctx, cacheline *cl_candidates,$/;"	f
finish_identifying_groups	cache.c	/^void finish_identifying_groups(cache_ctx *ctx, cacheline **cache_set_ds_ptrs,$/;"	f
flags	cache_types.h	/^    uint16_t flags;$/;"	m	struct:cacheline
footer	gen_cache_asm_files.py	/^    footer = f"\\n#endif \/\/ HEADER_{cache_level}_ASM_H"$/;"	v
gen_rand_bytes	util.c	/^void gen_rand_bytes(unsigned char *arr, uint32_t arr_len) {$/;"	f
gen_random_indices	util.c	/^void gen_random_indices(uint32_t *arr, uint32_t arr_len) {$/;"	f
get_all_msrmts_in_order	cache.h	/^static inline void get_all_msrmts_in_order(cacheline *head, time_type *res) {$/;"	f
get_avg	util.c	/^double get_avg(uint32_t *arr, uint32_t arr_len) {$/;"	f
get_cache_ctx	cache_types.h	/^static cache_ctx *get_cache_ctx(cache_level cache_level) {$/;"	f
get_cache_ds_len	cache_types.h	/^static uint32_t get_cache_ds_len(cacheline *cache_ds) {$/;"	f
get_cache_set	cache_types.h	/^static uint16_t get_cache_set(cache_ctx *ctx, void *ptr) {$/;"	f
get_cache_set_helper	cache_types.h	/^static uint16_t get_cache_set_helper(uint32_t sets, void *ptr) {$/;"	f
get_max	util.c	/^uint32_t get_max(uint32_t *arr, uint32_t arr_len) {$/;"	f
get_min	util.c	/^uint32_t get_min(uint32_t *arr, uint32_t arr_len) {$/;"	f
get_msrmt_for_set	cache.h	/^static inline void get_msrmt_for_set(cacheline *head, time_type *res) {$/;"	f
get_msrmts_for_all_set	cache.h	/^static inline void get_msrmts_for_all_set(cacheline *head, time_type *res) {$/;"	f
get_per_set_sum_of_msrmts	cache.h	/^static inline void get_per_set_sum_of_msrmts(cacheline *head, time_type *res) {$/;"	f
get_phys_addr	addr_translation.c	/^int get_phys_addr(uintptr_t *paddr, uintptr_t vaddr)$/;"	f
get_phys_cache_set	cache_types.h	/^static uint16_t get_phys_cache_set(cache_ctx *ctx, void *ptr) {$/;"	f
get_spanned_cache_lines	cache_types.h	/^static uint32_t get_spanned_cache_lines(cache_ctx *ctx, uint64_t size) {$/;"	f
get_virt_cache_set	cache_types.h	/^static uint16_t get_virt_cache_set(cache_ctx *ctx, void *ptr) {$/;"	f
has_collision	cache.c	/^bool has_collision(cache_ctx *ctx, cacheline *cl_candidate, cacheline *cache_set_ds,$/;"	f
identify_cache_sets	cache.c	/^void identify_cache_sets(cache_ctx *ctx, cacheline *coll_cl, cacheline *cache_set_ds,$/;"	f
incq	asm.h	/^static inline void incq(void *p) {$/;"	f
is_cached	cache.h	/^static inline bool is_cached(cache_ctx *ctx, void *p) {$/;"	f
is_in_arr	util.c	/^bool is_in_arr(uint32_t elem, uint32_t *arr, uint32_t arr_len) {$/;"	f
lfence	asm.h	/^static inline void lfence() {$/;"	f
lines	gen_cache_asm_files.py	/^        lines = conf_fp.readlines()$/;"	v
lines	gen_cache_asm_files.py	/^    lines = gen_conf_fp.readlines()$/;"	v
mfence	asm.h	/^static inline void mfence() {$/;"	f
next	cache_types.h	/^    cacheline *next;$/;"	m	struct:cacheline
nop_slide	asm.h	/^static inline void nop_slide() {$/;"	f
nr_of_cachelines	cache_types.h	/^    uint32_t nr_of_cachelines;$/;"	m	struct:cache_ctx
os	gen_cache_asm_files.py	/^import os$/;"	i
padding	cache_types.h	/^    char padding[CACHELINE_SIZE - 2 * sizeof(cacheline *)$/;"	m	struct:cacheline
pagemap_get_entry	addr_translation.c	/^int pagemap_get_entry(PagemapEntry *entry, int pagemap_fd, uintptr_t vaddr)$/;"	f
pfn	addr_translation.h	/^    uint64_t pfn : 54;$/;"	m	struct:__anon1
pin_to_cpu	util.c	/^void pin_to_cpu(int cpu) {$/;"	f
prefetcht0	asm.h	/^static inline void prefetcht0(void *p) {$/;"	f
prepare_cache_ds	cache.c	/^cacheline *prepare_cache_ds(cache_ctx *ctx) {$/;"	f
prepare_cache_set_ds	cache.c	/^cacheline *prepare_cache_set_ds(cache_ctx *ctx, uint32_t *sets, uint32_t sets_len) {$/;"	f
prepare_measurement	cache.c	/^void prepare_measurement() {$/;"	f
prepare_victim	victim.c	/^cacheline *prepare_victim(cache_ctx *ctx, uint32_t target_set) {$/;"	f
present	addr_translation.h	/^    unsigned int present : 1;$/;"	m	struct:__anon1
prev	cache_types.h	/^    cacheline *prev;$/;"	m	struct:cacheline
prime	cache.h	/^static inline cacheline *prime(cacheline *head) {$/;"	f
prime_cacheset	cache.h	/^static inline cacheline *prime_cacheset(cacheline *head) {$/;"	f
prime_rev	cache.h	/^static inline cacheline *prime_rev(cacheline *head) {$/;"	f
print_banner	io.h	/^static void print_banner(const char *msg) {$/;"	f
print_cache_ctx	cache_types.h	/^static void print_cache_ctx(cache_ctx *ctx) {$/;"	f
print_cacheline	cache_types.h	/^static void print_cacheline(cacheline *cl) {$/;"	f
print_hex	io.h	/^static void print_hex(const char *str, uint16_t str_len) {$/;"	f
print_results	io.h	/^static void print_results(uint32_t *res, uint32_t sample_cnt,$/;"	f
probe	cache.h	/^static inline cacheline *probe(cache_level cl, cacheline *head) {$/;"	f
probe_all_cachelines	cache.h	/^static inline cacheline *probe_all_cachelines(cacheline *head) {$/;"	f
probe_cacheset	cache.h	/^static inline cacheline *probe_cacheset(cache_level cl, cacheline *curr_cl) {$/;"	f
probe_full_ds	cache.h	/^static inline uint32_t probe_full_ds(cacheline *head) {$/;"	f
random_perm	util.c	/^void random_perm(uint32_t *arr, uint32_t arr_len) {$/;"	f
rdtsc	asm.h	/^static inline void rdtsc() {$/;"	f
re	gen_cache_asm_files.py	/^import re$/;"	i
readq	asm.h	/^static inline void readq(void *p) {$/;"	f
release_cache_ctx	cache_types.h	/^static void release_cache_ctx(cache_ctx *ctx) {$/;"	f
release_cache_ds	cache.c	/^void release_cache_ds(cache_ctx *ctx, cacheline *cache_ds) {$/;"	f
release_cache_set_ds	cache.c	/^void release_cache_set_ds(cache_ctx *ctx, cacheline *cache_set_ds) {$/;"	f
release_victim	victim.c	/^void release_victim(cache_ctx *ctx, cacheline *victim_cl) {$/;"	f
remove_cache_group_set	cache_types.h	/^static void *remove_cache_group_set(void *ptr) {$/;"	f
remove_cache_set	cache_types.h	/^static void *remove_cache_set(cache_ctx *ctx, void *ptr) {$/;"	f
set_seed	util.c	/^void set_seed() {$/;"	f
set_size	cache_types.h	/^    uint32_t set_size;$/;"	m	struct:cache_ctx
sets	cache_types.h	/^    uint32_t sets;$/;"	m	struct:cache_ctx
sfence	asm.h	/^static inline void sfence() {$/;"	f
soft_dirty	addr_translation.h	/^    unsigned int soft_dirty : 1;$/;"	m	struct:__anon1
start_timer	asm.h	/^static inline void start_timer() {$/;"	f
stop_timer	asm.h	/^static inline void stop_timer(uint32_t *tsc_low) {$/;"	f
swap	util.c	/^void swap(uint32_t *e1, uint32_t *e2) {$/;"	f
swapped	addr_translation.h	/^    unsigned int swapped : 1;$/;"	m	struct:__anon1
time_msrmt	cache_types.h	/^    time_type time_msrmt;$/;"	m	struct:cacheline
time_type	cache_types.h	/^typedef uint32_t time_type;$/;"	t
victim	victim.h	/^static inline void victim(void *p) {$/;"	f
victim_access_until_cached	victim.h	/^static inline void victim_access_until_cached(cache_ctx *ctx, void *p) {$/;"	f
victim_clflush	victim.h	/^static inline void victim_clflush(void *p) {$/;"	f
victim_loop	victim.h	/^static inline void victim_loop(void *p, uint32_t nr) {$/;"	f
